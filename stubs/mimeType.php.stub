<?php
/**
 * @generated This file was generated using Mimey. DO NOT EDIT manually!
 *
 * @noinspection ALL
 * @codeCoverageIgnore
 */

declare(strict_types=1);

namespace %namespace%;

use RuntimeException;
use InvalidArgumentException;
%usages%

enum %classname%: string implements MimeTypeInterface
{
%cases%%overrideAttribute%
	public function getExtension(): string
	{
		return match($this) {
%type2ext%
			default => throw new RuntimeException("Unknown extension for type: " . $this->value),
		};
	}
%overrideAttribute%
	public function getValue(): string
	{
		return $this->value;
	}

	public static function fromExtension(string $extension): MimeType
	{
		$type = self::tryFromExtension($extension);
		if ($type === null) {
			throw new InvalidArgumentException("Unknown extension: " . $extension);
		}

		return $type;
	}

	public static function tryFromExtension(string $extension): ?MimeType
	{
		return match($extension) {
%ext2type%
			default => null,
		};
	}
}
